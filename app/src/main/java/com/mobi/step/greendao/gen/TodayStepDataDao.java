package com.mobi.step.greendao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.mobi.step.greendao.TodayStepData;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "TODAY_STEP_DATA".
*/
public class TodayStepDataDao extends AbstractDao<TodayStepData, Long> {

    public static final String TABLENAME = "TODAY_STEP_DATA";

    /**
     * Properties of entity TodayStepData.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property UserId = new Property(1, String.class, "userId", false, "USER_ID");
        public final static Property System_data = new Property(2, String.class, "system_data", false, "SYSTEM_DATA");
        public final static Property Current_data = new Property(3, String.class, "current_data", false, "CURRENT_DATA");
        public final static Property Date = new Property(4, String.class, "date", false, "DATE");
        public final static Property Time = new Property(5, String.class, "time", false, "TIME");
        public final static Property WeChat_data = new Property(6, String.class, "weChat_data", false, "WE_CHAT_DATA");
    }


    public TodayStepDataDao(DaoConfig config) {
        super(config);
    }
    
    public TodayStepDataDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"TODAY_STEP_DATA\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"USER_ID\" TEXT," + // 1: userId
                "\"SYSTEM_DATA\" TEXT," + // 2: system_data
                "\"CURRENT_DATA\" TEXT," + // 3: current_data
                "\"DATE\" TEXT," + // 4: date
                "\"TIME\" TEXT," + // 5: time
                "\"WE_CHAT_DATA\" TEXT);"); // 6: weChat_data
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"TODAY_STEP_DATA\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, TodayStepData entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String userId = entity.getUserId();
        if (userId != null) {
            stmt.bindString(2, userId);
        }
 
        String system_data = entity.getSystem_data();
        if (system_data != null) {
            stmt.bindString(3, system_data);
        }
 
        String current_data = entity.getCurrent_data();
        if (current_data != null) {
            stmt.bindString(4, current_data);
        }
 
        String date = entity.getDate();
        if (date != null) {
            stmt.bindString(5, date);
        }
 
        String time = entity.getTime();
        if (time != null) {
            stmt.bindString(6, time);
        }
 
        String weChat_data = entity.getWeChat_data();
        if (weChat_data != null) {
            stmt.bindString(7, weChat_data);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, TodayStepData entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String userId = entity.getUserId();
        if (userId != null) {
            stmt.bindString(2, userId);
        }
 
        String system_data = entity.getSystem_data();
        if (system_data != null) {
            stmt.bindString(3, system_data);
        }
 
        String current_data = entity.getCurrent_data();
        if (current_data != null) {
            stmt.bindString(4, current_data);
        }
 
        String date = entity.getDate();
        if (date != null) {
            stmt.bindString(5, date);
        }
 
        String time = entity.getTime();
        if (time != null) {
            stmt.bindString(6, time);
        }
 
        String weChat_data = entity.getWeChat_data();
        if (weChat_data != null) {
            stmt.bindString(7, weChat_data);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public TodayStepData readEntity(Cursor cursor, int offset) {
        TodayStepData entity = new TodayStepData( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // userId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // system_data
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // current_data
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // date
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // time
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6) // weChat_data
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, TodayStepData entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUserId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setSystem_data(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setCurrent_data(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setDate(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setTime(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setWeChat_data(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(TodayStepData entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(TodayStepData entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(TodayStepData entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
